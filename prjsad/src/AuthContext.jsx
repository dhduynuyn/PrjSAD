import React, { createContext, useState, useContext, useEffect } from 'react';
const AuthContext = createContext(null);
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null); // Ban ƒë·∫ßu ch∆∞a ƒëƒÉng nh·∫≠p, user l√† null
  const [token, setToken] = useState(localStorage.getItem('authToken')); // L·∫•y token t·ª´ localStorage khi kh·ªüi t·∫°o
  const [isLoading, setIsLoading] = useState(true); // ƒê·ªÉ x·ª≠ l√Ω tr·∫°ng th√°i t·∫£i ban ƒë·∫ßu

  useEffect(() => {
    const initializeAuth = async () => {
      const storedToken = localStorage.getItem('authToken');
      const storedUser = localStorage.getItem('authUser');

      if (storedToken) {
        setToken(storedToken);
        if (storedUser) {
          try {
            setUser(JSON.parse(storedUser));
          } catch (error) {
            console.error("Failed to parse stored user:", error);
            // N·∫øu user l∆∞u tr·ªØ b·ªã l·ªói, x√≥a ƒëi
            localStorage.removeItem('authUser');
            localStorage.removeItem('authToken');
            setToken(null);
            setUser(null);
          }
        } else {
          // N·∫øu ch·ªâ c√≥ token m√† kh√¥ng c√≥ user (v√≠ d·ª•: user ƒë√≥ng tab gi·ªØa ch·ª´ng khi ƒëang fetch user)
          // G·ªçi API /api/user/me ·ªü ƒë√¢y ƒë·ªÉ l·∫•y l·∫°i th√¥ng tin user
          // Ho·∫∑c ƒë∆°n gi·∫£n l√† y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i b·∫±ng c√°ch x√≥a token
          // L·∫•y l·∫°i th√¥ng tin user n·∫øu ch·ªâ c√≥ token
          try {
            // G·ªåI API L·∫§Y USER INFO ---
            // Gi·∫£ s·ª≠ c√≥ endpoint /api/auth/me ƒë·ªÉ l·∫•y th√¥ng tin user d·ª±a tr√™n token
            const response = await fetch('/api/auth/me', { // THAY TH·∫æ ENDPOINT N√ÄY
              headers: {
                'Authorization': `Bearer ${storedToken}`,
              },
            });
            if (response.ok) {
              const userData = await response.json();
              setUser(userData);
              localStorage.setItem('authUser', JSON.stringify(userData));
            } else {
              // Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
              console.warn("Token invalid or expired during initialization.");
              localStorage.removeItem('authToken');
              localStorage.removeItem('authUser');
              setToken(null);
              setUser(null);
            }
          } catch (error) {
            console.error("Error fetching user on init:", error);
            localStorage.removeItem('authToken');
            localStorage.removeItem('authUser');
            setToken(null);
            setUser(null);
          }
        }
      }
      setIsLoading(false); // ƒê√°nh d·∫•u ƒë√£ t·∫£i xong
    };

    initializeAuth();
  }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn khi component mount

  // H√†m ƒë·ªÉ g·ªçi khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng t·ª´ API
  // userDataFromApi n√™n ch·ª©a th√¥ng tin user
  // authTokenFromApi l√† token nh·∫≠n ƒë∆∞·ª£c


  // H√†m ƒë·ªÉ g·ªçi khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  const login = (userDataFromApi, authTokenFromApi) => {
    localStorage.setItem('authToken', authTokenFromApi);
    localStorage.setItem('authUser', JSON.stringify(userDataFromApi));
    setToken(authTokenFromApi);
    setUser(userDataFromApi);
  };

  const logout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('authUser');
    setToken(null);
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('token'); // üî• N·∫øu b·∫°n l∆∞u token ri√™ng th√¨ c≈©ng x√≥a
  };

  // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin user (v√≠ d·ª• sau khi ch·ªânh s·ª≠a profile)
  const updateUser = (updatedUserData) => {
    setUser(updatedUserData);
    localStorage.setItem('authUser', JSON.stringify(updatedUserData));
  };

  const value = {
    user,
    token, // Cung c·∫•p token ra ngo√†i n·∫øu c√°c component kh√°c c·∫ßn tr·ª±c ti·∫øp
    isAuthenticated: !!user && !!token, // User ƒë∆∞·ª£c coi l√† authenticated khi c√≥ c·∫£ user object v√† token
    login,
    logout,
    updateUser, // Th√™m h√†m c·∫≠p nh·∫≠t user
    isLoadingAuth: isLoading, // Tr·∫°ng th√°i ƒë·ªÉ bi·∫øt AuthContext ƒë√£ s·∫µn s√†ng hay ch∆∞a
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
